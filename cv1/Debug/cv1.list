
cv1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001310  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080013d0  080013d0  000113d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080014b4  080014b4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080014b4  080014b4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080014b4  080014b4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014b4  080014b4  000114b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080014b8  080014b8  000114b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080014bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  080014c0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080014c0  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002b5e  00000000  00000000  0002006f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000e73  00000000  00000000  00022bcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004f0  00000000  00000000  00023a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000397  00000000  00000000  00023f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000a147  00000000  00000000  000242c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003eb5  00000000  00000000  0002e40e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00034210  00000000  00000000  000322c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000106c  00000000  00000000  000664d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00067540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080013b8 	.word	0x080013b8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080013b8 	.word	0x080013b8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000224:	4b04      	ldr	r3, [pc, #16]	; (8000238 <LL_RCC_HSI_Enable+0x18>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b03      	ldr	r3, [pc, #12]	; (8000238 <LL_RCC_HSI_Enable+0x18>)
 800022a:	2101      	movs	r1, #1
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
}
 8000230:	46c0      	nop			; (mov r8, r8)
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	46c0      	nop			; (mov r8, r8)
 8000238:	40021000 	.word	0x40021000

0800023c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000240:	4b05      	ldr	r3, [pc, #20]	; (8000258 <LL_RCC_HSI_IsReady+0x1c>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	2202      	movs	r2, #2
 8000246:	4013      	ands	r3, r2
 8000248:	3b02      	subs	r3, #2
 800024a:	425a      	negs	r2, r3
 800024c:	4153      	adcs	r3, r2
 800024e:	b2db      	uxtb	r3, r3
}
 8000250:	0018      	movs	r0, r3
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	40021000 	.word	0x40021000

0800025c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000264:	4b06      	ldr	r3, [pc, #24]	; (8000280 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	22f8      	movs	r2, #248	; 0xf8
 800026a:	4393      	bics	r3, r2
 800026c:	0019      	movs	r1, r3
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	00da      	lsls	r2, r3, #3
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000274:	430a      	orrs	r2, r1
 8000276:	601a      	str	r2, [r3, #0]
}
 8000278:	46c0      	nop			; (mov r8, r8)
 800027a:	46bd      	mov	sp, r7
 800027c:	b002      	add	sp, #8
 800027e:	bd80      	pop	{r7, pc}
 8000280:	40021000 	.word	0x40021000

08000284 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800028c:	4b06      	ldr	r3, [pc, #24]	; (80002a8 <LL_RCC_SetSysClkSource+0x24>)
 800028e:	685b      	ldr	r3, [r3, #4]
 8000290:	2203      	movs	r2, #3
 8000292:	4393      	bics	r3, r2
 8000294:	0019      	movs	r1, r3
 8000296:	4b04      	ldr	r3, [pc, #16]	; (80002a8 <LL_RCC_SetSysClkSource+0x24>)
 8000298:	687a      	ldr	r2, [r7, #4]
 800029a:	430a      	orrs	r2, r1
 800029c:	605a      	str	r2, [r3, #4]
}
 800029e:	46c0      	nop			; (mov r8, r8)
 80002a0:	46bd      	mov	sp, r7
 80002a2:	b002      	add	sp, #8
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	40021000 	.word	0x40021000

080002ac <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80002b0:	4b03      	ldr	r3, [pc, #12]	; (80002c0 <LL_RCC_GetSysClkSource+0x14>)
 80002b2:	685b      	ldr	r3, [r3, #4]
 80002b4:	220c      	movs	r2, #12
 80002b6:	4013      	ands	r3, r2
}
 80002b8:	0018      	movs	r0, r3
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	46c0      	nop			; (mov r8, r8)
 80002c0:	40021000 	.word	0x40021000

080002c4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <LL_RCC_SetAHBPrescaler+0x24>)
 80002ce:	685b      	ldr	r3, [r3, #4]
 80002d0:	22f0      	movs	r2, #240	; 0xf0
 80002d2:	4393      	bics	r3, r2
 80002d4:	0019      	movs	r1, r3
 80002d6:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <LL_RCC_SetAHBPrescaler+0x24>)
 80002d8:	687a      	ldr	r2, [r7, #4]
 80002da:	430a      	orrs	r2, r1
 80002dc:	605a      	str	r2, [r3, #4]
}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	46bd      	mov	sp, r7
 80002e2:	b002      	add	sp, #8
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)
 80002e8:	40021000 	.word	0x40021000

080002ec <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 80002f4:	4b06      	ldr	r3, [pc, #24]	; (8000310 <LL_RCC_SetAPB1Prescaler+0x24>)
 80002f6:	685b      	ldr	r3, [r3, #4]
 80002f8:	4a06      	ldr	r2, [pc, #24]	; (8000314 <LL_RCC_SetAPB1Prescaler+0x28>)
 80002fa:	4013      	ands	r3, r2
 80002fc:	0019      	movs	r1, r3
 80002fe:	4b04      	ldr	r3, [pc, #16]	; (8000310 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	430a      	orrs	r2, r1
 8000304:	605a      	str	r2, [r3, #4]
}
 8000306:	46c0      	nop			; (mov r8, r8)
 8000308:	46bd      	mov	sp, r7
 800030a:	b002      	add	sp, #8
 800030c:	bd80      	pop	{r7, pc}
 800030e:	46c0      	nop			; (mov r8, r8)
 8000310:	40021000 	.word	0x40021000
 8000314:	fffff8ff 	.word	0xfffff8ff

08000318 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800031c:	4b04      	ldr	r3, [pc, #16]	; (8000330 <LL_RCC_PLL_Enable+0x18>)
 800031e:	681a      	ldr	r2, [r3, #0]
 8000320:	4b03      	ldr	r3, [pc, #12]	; (8000330 <LL_RCC_PLL_Enable+0x18>)
 8000322:	2180      	movs	r1, #128	; 0x80
 8000324:	0449      	lsls	r1, r1, #17
 8000326:	430a      	orrs	r2, r1
 8000328:	601a      	str	r2, [r3, #0]
}
 800032a:	46c0      	nop			; (mov r8, r8)
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	40021000 	.word	0x40021000

08000334 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000338:	4b07      	ldr	r3, [pc, #28]	; (8000358 <LL_RCC_PLL_IsReady+0x24>)
 800033a:	681a      	ldr	r2, [r3, #0]
 800033c:	2380      	movs	r3, #128	; 0x80
 800033e:	049b      	lsls	r3, r3, #18
 8000340:	4013      	ands	r3, r2
 8000342:	22fe      	movs	r2, #254	; 0xfe
 8000344:	0612      	lsls	r2, r2, #24
 8000346:	4694      	mov	ip, r2
 8000348:	4463      	add	r3, ip
 800034a:	425a      	negs	r2, r3
 800034c:	4153      	adcs	r3, r2
 800034e:	b2db      	uxtb	r3, r3
}
 8000350:	0018      	movs	r0, r3
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	46c0      	nop			; (mov r8, r8)
 8000358:	40021000 	.word	0x40021000

0800035c <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 8000366:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000368:	685b      	ldr	r3, [r3, #4]
 800036a:	4a0e      	ldr	r2, [pc, #56]	; (80003a4 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 800036c:	4013      	ands	r3, r2
 800036e:	0019      	movs	r1, r3
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	2380      	movs	r3, #128	; 0x80
 8000374:	025b      	lsls	r3, r3, #9
 8000376:	401a      	ands	r2, r3
 8000378:	683b      	ldr	r3, [r7, #0]
 800037a:	431a      	orrs	r2, r3
 800037c:	4b08      	ldr	r3, [pc, #32]	; (80003a0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800037e:	430a      	orrs	r2, r1
 8000380:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 8000382:	4b07      	ldr	r3, [pc, #28]	; (80003a0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000386:	220f      	movs	r2, #15
 8000388:	4393      	bics	r3, r2
 800038a:	0019      	movs	r1, r3
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	220f      	movs	r2, #15
 8000390:	401a      	ands	r2, r3
 8000392:	4b03      	ldr	r3, [pc, #12]	; (80003a0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000394:	430a      	orrs	r2, r1
 8000396:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000398:	46c0      	nop			; (mov r8, r8)
 800039a:	46bd      	mov	sp, r7
 800039c:	b002      	add	sp, #8
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	40021000 	.word	0x40021000
 80003a4:	ffc2ffff 	.word	0xffc2ffff

080003a8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b084      	sub	sp, #16
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80003b0:	4b07      	ldr	r3, [pc, #28]	; (80003d0 <LL_AHB1_GRP1_EnableClock+0x28>)
 80003b2:	6959      	ldr	r1, [r3, #20]
 80003b4:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <LL_AHB1_GRP1_EnableClock+0x28>)
 80003b6:	687a      	ldr	r2, [r7, #4]
 80003b8:	430a      	orrs	r2, r1
 80003ba:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80003bc:	4b04      	ldr	r3, [pc, #16]	; (80003d0 <LL_AHB1_GRP1_EnableClock+0x28>)
 80003be:	695b      	ldr	r3, [r3, #20]
 80003c0:	687a      	ldr	r2, [r7, #4]
 80003c2:	4013      	ands	r3, r2
 80003c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003c6:	68fb      	ldr	r3, [r7, #12]
}
 80003c8:	46c0      	nop			; (mov r8, r8)
 80003ca:	46bd      	mov	sp, r7
 80003cc:	b004      	add	sp, #16
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	40021000 	.word	0x40021000

080003d4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b084      	sub	sp, #16
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80003dc:	4b07      	ldr	r3, [pc, #28]	; (80003fc <LL_APB1_GRP1_EnableClock+0x28>)
 80003de:	69d9      	ldr	r1, [r3, #28]
 80003e0:	4b06      	ldr	r3, [pc, #24]	; (80003fc <LL_APB1_GRP1_EnableClock+0x28>)
 80003e2:	687a      	ldr	r2, [r7, #4]
 80003e4:	430a      	orrs	r2, r1
 80003e6:	61da      	str	r2, [r3, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80003e8:	4b04      	ldr	r3, [pc, #16]	; (80003fc <LL_APB1_GRP1_EnableClock+0x28>)
 80003ea:	69db      	ldr	r3, [r3, #28]
 80003ec:	687a      	ldr	r2, [r7, #4]
 80003ee:	4013      	ands	r3, r2
 80003f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003f2:	68fb      	ldr	r3, [r7, #12]
}
 80003f4:	46c0      	nop			; (mov r8, r8)
 80003f6:	46bd      	mov	sp, r7
 80003f8:	b004      	add	sp, #16
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	40021000 	.word	0x40021000

08000400 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b084      	sub	sp, #16
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000408:	4b07      	ldr	r3, [pc, #28]	; (8000428 <LL_APB1_GRP2_EnableClock+0x28>)
 800040a:	6999      	ldr	r1, [r3, #24]
 800040c:	4b06      	ldr	r3, [pc, #24]	; (8000428 <LL_APB1_GRP2_EnableClock+0x28>)
 800040e:	687a      	ldr	r2, [r7, #4]
 8000410:	430a      	orrs	r2, r1
 8000412:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000414:	4b04      	ldr	r3, [pc, #16]	; (8000428 <LL_APB1_GRP2_EnableClock+0x28>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	687a      	ldr	r2, [r7, #4]
 800041a:	4013      	ands	r3, r2
 800041c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800041e:	68fb      	ldr	r3, [r7, #12]
}
 8000420:	46c0      	nop			; (mov r8, r8)
 8000422:	46bd      	mov	sp, r7
 8000424:	b004      	add	sp, #16
 8000426:	bd80      	pop	{r7, pc}
 8000428:	40021000 	.word	0x40021000

0800042c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800042c:	b590      	push	{r4, r7, lr}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
 8000434:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], SYSCFG_EXTICR1_EXTI0 << (Line >> 16), Port << (Line >> 16));
 8000436:	4a0f      	ldr	r2, [pc, #60]	; (8000474 <LL_SYSCFG_SetEXTISource+0x48>)
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	21ff      	movs	r1, #255	; 0xff
 800043c:	400b      	ands	r3, r1
 800043e:	3302      	adds	r3, #2
 8000440:	009b      	lsls	r3, r3, #2
 8000442:	589b      	ldr	r3, [r3, r2]
 8000444:	683a      	ldr	r2, [r7, #0]
 8000446:	0c12      	lsrs	r2, r2, #16
 8000448:	210f      	movs	r1, #15
 800044a:	4091      	lsls	r1, r2
 800044c:	000a      	movs	r2, r1
 800044e:	43d2      	mvns	r2, r2
 8000450:	401a      	ands	r2, r3
 8000452:	0011      	movs	r1, r2
 8000454:	683b      	ldr	r3, [r7, #0]
 8000456:	0c1b      	lsrs	r3, r3, #16
 8000458:	687a      	ldr	r2, [r7, #4]
 800045a:	409a      	lsls	r2, r3
 800045c:	4805      	ldr	r0, [pc, #20]	; (8000474 <LL_SYSCFG_SetEXTISource+0x48>)
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	24ff      	movs	r4, #255	; 0xff
 8000462:	4023      	ands	r3, r4
 8000464:	430a      	orrs	r2, r1
 8000466:	3302      	adds	r3, #2
 8000468:	009b      	lsls	r3, r3, #2
 800046a:	501a      	str	r2, [r3, r0]
}
 800046c:	46c0      	nop			; (mov r8, r8)
 800046e:	46bd      	mov	sp, r7
 8000470:	b003      	add	sp, #12
 8000472:	bd90      	pop	{r4, r7, pc}
 8000474:	40010000 	.word	0x40010000

08000478 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000480:	4b06      	ldr	r3, [pc, #24]	; (800049c <LL_FLASH_SetLatency+0x24>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	2201      	movs	r2, #1
 8000486:	4393      	bics	r3, r2
 8000488:	0019      	movs	r1, r3
 800048a:	4b04      	ldr	r3, [pc, #16]	; (800049c <LL_FLASH_SetLatency+0x24>)
 800048c:	687a      	ldr	r2, [r7, #4]
 800048e:	430a      	orrs	r2, r1
 8000490:	601a      	str	r2, [r3, #0]
}
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	46bd      	mov	sp, r7
 8000496:	b002      	add	sp, #8
 8000498:	bd80      	pop	{r7, pc}
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	40022000 	.word	0x40022000

080004a0 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80004a4:	4b03      	ldr	r3, [pc, #12]	; (80004b4 <LL_FLASH_GetLatency+0x14>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	2201      	movs	r2, #1
 80004aa:	4013      	ands	r3, r2
}
 80004ac:	0018      	movs	r0, r3
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	40022000 	.word	0x40022000

080004b8 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	2201      	movs	r2, #1
 80004c6:	431a      	orrs	r2, r3
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	601a      	str	r2, [r3, #0]
}
 80004cc:	46c0      	nop			; (mov r8, r8)
 80004ce:	46bd      	mov	sp, r7
 80004d0:	b002      	add	sp, #8
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  - SCEN (if Smartcard feature is supported), IREN (if Irda feature is supported) and HDSEL bits in the USART_CR3 register.
  */
#if defined(USART_LIN_SUPPORT)
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(USARTx->CR2, USART_CR2_CLKEN);
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	685b      	ldr	r3, [r3, #4]
 80004e0:	4a07      	ldr	r2, [pc, #28]	; (8000500 <LL_USART_ConfigAsyncMode+0x2c>)
 80004e2:	401a      	ands	r2, r3
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	605a      	str	r2, [r3, #4]
#endif /* USART_IRDA_SUPPORT */
#else
#if defined(USART_IRDA_SUPPORT)
  CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_HDSEL));
#else
  CLEAR_BIT(USARTx->CR3, USART_CR3_HDSEL);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	689b      	ldr	r3, [r3, #8]
 80004ec:	2208      	movs	r2, #8
 80004ee:	4393      	bics	r3, r2
 80004f0:	001a      	movs	r2, r3
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	609a      	str	r2, [r3, #8]
#endif /* USART_IRDA_SUPPORT */
#endif /* USART_SMARTCARD_SUPPORT */
}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	46bd      	mov	sp, r7
 80004fa:	b002      	add	sp, #8
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	fffff7ff 	.word	0xfffff7ff

08000504 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800050c:	f3ef 8310 	mrs	r3, PRIMASK
 8000510:	60bb      	str	r3, [r7, #8]
  return(result);
 8000512:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8000514:	617b      	str	r3, [r7, #20]
 8000516:	2301      	movs	r3, #1
 8000518:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	f383 8810 	msr	PRIMASK, r3
}
 8000520:	46c0      	nop			; (mov r8, r8)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	689b      	ldr	r3, [r3, #8]
 8000526:	4a07      	ldr	r2, [pc, #28]	; (8000544 <LL_USART_DisableIT_CTS+0x40>)
 8000528:	401a      	ands	r2, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000532:	693b      	ldr	r3, [r7, #16]
 8000534:	f383 8810 	msr	PRIMASK, r3
}
 8000538:	46c0      	nop			; (mov r8, r8)
}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	46bd      	mov	sp, r7
 800053e:	b006      	add	sp, #24
 8000540:	bd80      	pop	{r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	fffffbff 	.word	0xfffffbff

08000548 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	60b9      	str	r1, [r7, #8]
 8000552:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	6819      	ldr	r1, [r3, #0]
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	435b      	muls	r3, r3
 800055c:	001a      	movs	r2, r3
 800055e:	0013      	movs	r3, r2
 8000560:	005b      	lsls	r3, r3, #1
 8000562:	189b      	adds	r3, r3, r2
 8000564:	43db      	mvns	r3, r3
 8000566:	400b      	ands	r3, r1
 8000568:	001a      	movs	r2, r3
 800056a:	68bb      	ldr	r3, [r7, #8]
 800056c:	435b      	muls	r3, r3
 800056e:	6879      	ldr	r1, [r7, #4]
 8000570:	434b      	muls	r3, r1
 8000572:	431a      	orrs	r2, r3
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	601a      	str	r2, [r3, #0]
}
 8000578:	46c0      	nop			; (mov r8, r8)
 800057a:	46bd      	mov	sp, r7
 800057c:	b004      	add	sp, #16
 800057e:	bd80      	pop	{r7, pc}

08000580 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	68d9      	ldr	r1, [r3, #12]
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	435b      	muls	r3, r3
 8000594:	001a      	movs	r2, r3
 8000596:	0013      	movs	r3, r2
 8000598:	005b      	lsls	r3, r3, #1
 800059a:	189b      	adds	r3, r3, r2
 800059c:	43db      	mvns	r3, r3
 800059e:	400b      	ands	r3, r1
 80005a0:	001a      	movs	r2, r3
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	435b      	muls	r3, r3
 80005a6:	6879      	ldr	r1, [r7, #4]
 80005a8:	434b      	muls	r3, r1
 80005aa:	431a      	orrs	r2, r3
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	60da      	str	r2, [r3, #12]
}
 80005b0:	46c0      	nop			; (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	b004      	add	sp, #16
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	683a      	ldr	r2, [r7, #0]
 80005c6:	619a      	str	r2, [r3, #24]
}
 80005c8:	46c0      	nop			; (mov r8, r8)
 80005ca:	46bd      	mov	sp, r7
 80005cc:	b002      	add	sp, #8
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	683a      	ldr	r2, [r7, #0]
 80005de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80005e0:	46c0      	nop			; (mov r8, r8)
 80005e2:	46bd      	mov	sp, r7
 80005e4:	b002      	add	sp, #8
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <morse_LD>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void morse_LD(const char* c)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	  for (int i = 0; c[i] != '\n' ; i++)
 80005f0:	2300      	movs	r3, #0
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	e032      	b.n	800065c <morse_LD+0x74>
	  {
		  if (c[i] == '.')  {
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	18d3      	adds	r3, r2, r3
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b2e      	cmp	r3, #46	; 0x2e
 8000600:	d10f      	bne.n	8000622 <morse_LD+0x3a>
			  LL_GPIO_SetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8000602:	2390      	movs	r3, #144	; 0x90
 8000604:	05db      	lsls	r3, r3, #23
 8000606:	2120      	movs	r1, #32
 8000608:	0018      	movs	r0, r3
 800060a:	f7ff ffd5 	bl	80005b8 <LL_GPIO_SetOutputPin>
			  LL_mDelay(200);
 800060e:	20c8      	movs	r0, #200	; 0xc8
 8000610:	f000 fe76 	bl	8001300 <LL_mDelay>
			  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8000614:	2390      	movs	r3, #144	; 0x90
 8000616:	05db      	lsls	r3, r3, #23
 8000618:	2120      	movs	r1, #32
 800061a:	0018      	movs	r0, r3
 800061c:	f7ff ffd8 	bl	80005d0 <LL_GPIO_ResetOutputPin>
 8000620:	e016      	b.n	8000650 <morse_LD+0x68>
		  }

		  else if (c[i] == '-') {
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	18d3      	adds	r3, r2, r3
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b2d      	cmp	r3, #45	; 0x2d
 800062c:	d110      	bne.n	8000650 <morse_LD+0x68>
			  LL_GPIO_SetOutputPin(LD2_GPIO_Port, LD2_Pin);
 800062e:	2390      	movs	r3, #144	; 0x90
 8000630:	05db      	lsls	r3, r3, #23
 8000632:	2120      	movs	r1, #32
 8000634:	0018      	movs	r0, r3
 8000636:	f7ff ffbf 	bl	80005b8 <LL_GPIO_SetOutputPin>
			  LL_mDelay(400);
 800063a:	23c8      	movs	r3, #200	; 0xc8
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	0018      	movs	r0, r3
 8000640:	f000 fe5e 	bl	8001300 <LL_mDelay>
			  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8000644:	2390      	movs	r3, #144	; 0x90
 8000646:	05db      	lsls	r3, r3, #23
 8000648:	2120      	movs	r1, #32
 800064a:	0018      	movs	r0, r3
 800064c:	f7ff ffc0 	bl	80005d0 <LL_GPIO_ResetOutputPin>
		  }

		  LL_mDelay(100);
 8000650:	2064      	movs	r0, #100	; 0x64
 8000652:	f000 fe55 	bl	8001300 <LL_mDelay>
	  for (int i = 0; c[i] != '\n' ; i++)
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	3301      	adds	r3, #1
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	687a      	ldr	r2, [r7, #4]
 8000660:	18d3      	adds	r3, r2, r3
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b0a      	cmp	r3, #10
 8000666:	d1c6      	bne.n	80005f6 <morse_LD+0xe>
	  }

	  LL_mDelay(100);
 8000668:	2064      	movs	r0, #100	; 0x64
 800066a:	f000 fe49 	bl	8001300 <LL_mDelay>
}
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	46bd      	mov	sp, r7
 8000672:	b004      	add	sp, #16
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <semilight_solution>:

	}
}

void semilight_solution()
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
	static const uint8_t arr[] = {0, 0, 0, 1, 1, 1, 0, 0, 0};

	for (uint8_t i = 0; i < sizeof(arr); i++)  {
 800067e:	1dfb      	adds	r3, r7, #7
 8000680:	2200      	movs	r2, #0
 8000682:	701a      	strb	r2, [r3, #0]
 8000684:	e013      	b.n	80006ae <semilight_solution+0x36>
		if (arr[i] == 1) {
 8000686:	1dfb      	adds	r3, r7, #7
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	4a0d      	ldr	r2, [pc, #52]	; (80006c0 <semilight_solution+0x48>)
 800068c:	5cd3      	ldrb	r3, [r2, r3]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d104      	bne.n	800069c <semilight_solution+0x24>
			morse_LD("-\n");
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <semilight_solution+0x4c>)
 8000694:	0018      	movs	r0, r3
 8000696:	f7ff ffa7 	bl	80005e8 <morse_LD>
 800069a:	e003      	b.n	80006a4 <semilight_solution+0x2c>
		}
		else {
			morse_LD(".\n");
 800069c:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <semilight_solution+0x50>)
 800069e:	0018      	movs	r0, r3
 80006a0:	f7ff ffa2 	bl	80005e8 <morse_LD>
	for (uint8_t i = 0; i < sizeof(arr); i++)  {
 80006a4:	1dfb      	adds	r3, r7, #7
 80006a6:	781a      	ldrb	r2, [r3, #0]
 80006a8:	1dfb      	adds	r3, r7, #7
 80006aa:	3201      	adds	r2, #1
 80006ac:	701a      	strb	r2, [r3, #0]
 80006ae:	1dfb      	adds	r3, r7, #7
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b08      	cmp	r3, #8
 80006b4:	d9e7      	bls.n	8000686 <semilight_solution+0xe>
		}
	}
}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	b002      	add	sp, #8
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	08001490 	.word	0x08001490
 80006c4:	08001454 	.word	0x08001454
 80006c8:	080013ec 	.word	0x080013ec

080006cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_SYSCFG);
 80006d0:	2001      	movs	r0, #1
 80006d2:	f7ff fe95 	bl	8000400 <LL_APB1_GRP2_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80006d6:	2380      	movs	r3, #128	; 0x80
 80006d8:	055b      	lsls	r3, r3, #21
 80006da:	0018      	movs	r0, r3
 80006dc:	f7ff fe7a 	bl	80003d4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e0:	f000 f812 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e4:	f000 f8ce 	bl	8000884 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006e8:	f000 f84e 	bl	8000788 <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //heavy_solution();
	  //light_solution();
	  semilight_solution();
 80006ec:	f7ff ffc4 	bl	8000678 <semilight_solution>

	  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 80006f0:	2390      	movs	r3, #144	; 0x90
 80006f2:	05db      	lsls	r3, r3, #23
 80006f4:	2120      	movs	r1, #32
 80006f6:	0018      	movs	r0, r3
 80006f8:	f7ff ff6a 	bl	80005d0 <LL_GPIO_ResetOutputPin>
	  LL_mDelay(500);
 80006fc:	23fa      	movs	r3, #250	; 0xfa
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	0018      	movs	r0, r3
 8000702:	f000 fdfd 	bl	8001300 <LL_mDelay>
	  semilight_solution();
 8000706:	e7f1      	b.n	80006ec <main+0x20>

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 800070c:	2001      	movs	r0, #1
 800070e:	f7ff feb3 	bl	8000478 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1)
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	f7ff fec4 	bl	80004a0 <LL_FLASH_GetLatency>
 8000718:	0003      	movs	r3, r0
 800071a:	2b01      	cmp	r3, #1
 800071c:	d1fa      	bne.n	8000714 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 800071e:	f7ff fd7f 	bl	8000220 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	f7ff fd8a 	bl	800023c <LL_RCC_HSI_IsReady>
 8000728:	0003      	movs	r3, r0
 800072a:	2b01      	cmp	r3, #1
 800072c:	d1fa      	bne.n	8000724 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800072e:	2010      	movs	r0, #16
 8000730:	f7ff fd94 	bl	800025c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_12);
 8000734:	23a0      	movs	r3, #160	; 0xa0
 8000736:	039b      	lsls	r3, r3, #14
 8000738:	0019      	movs	r1, r3
 800073a:	2000      	movs	r0, #0
 800073c:	f7ff fe0e 	bl	800035c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000740:	f7ff fdea 	bl	8000318 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000744:	46c0      	nop			; (mov r8, r8)
 8000746:	f7ff fdf5 	bl	8000334 <LL_RCC_PLL_IsReady>
 800074a:	0003      	movs	r3, r0
 800074c:	2b01      	cmp	r3, #1
 800074e:	d1fa      	bne.n	8000746 <SystemClock_Config+0x3e>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000750:	2000      	movs	r0, #0
 8000752:	f7ff fdb7 	bl	80002c4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000756:	2000      	movs	r0, #0
 8000758:	f7ff fdc8 	bl	80002ec <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800075c:	2002      	movs	r0, #2
 800075e:	f7ff fd91 	bl	8000284 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	f7ff fda2 	bl	80002ac <LL_RCC_GetSysClkSource>
 8000768:	0003      	movs	r3, r0
 800076a:	2b08      	cmp	r3, #8
 800076c:	d1fa      	bne.n	8000764 <SystemClock_Config+0x5c>
  {

  }
  LL_Init1msTick(48000000);
 800076e:	4b05      	ldr	r3, [pc, #20]	; (8000784 <SystemClock_Config+0x7c>)
 8000770:	0018      	movs	r0, r3
 8000772:	f000 fdb5 	bl	80012e0 <LL_Init1msTick>
  LL_SetSystemCoreClock(48000000);
 8000776:	4b03      	ldr	r3, [pc, #12]	; (8000784 <SystemClock_Config+0x7c>)
 8000778:	0018      	movs	r0, r3
 800077a:	f000 fde3 	bl	8001344 <LL_SetSystemCoreClock>
}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	02dc6c00 	.word	0x02dc6c00

08000788 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000788:	b590      	push	{r4, r7, lr}
 800078a:	b08f      	sub	sp, #60	; 0x3c
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800078e:	241c      	movs	r4, #28
 8000790:	193b      	adds	r3, r7, r4
 8000792:	0018      	movs	r0, r3
 8000794:	231c      	movs	r3, #28
 8000796:	001a      	movs	r2, r3
 8000798:	2100      	movs	r1, #0
 800079a:	f000 fde1 	bl	8001360 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	0018      	movs	r0, r3
 80007a2:	2318      	movs	r3, #24
 80007a4:	001a      	movs	r2, r3
 80007a6:	2100      	movs	r1, #0
 80007a8:	f000 fdda 	bl	8001360 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	029b      	lsls	r3, r3, #10
 80007b0:	0018      	movs	r0, r3
 80007b2:	f7ff fe0f 	bl	80003d4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80007b6:	2380      	movs	r3, #128	; 0x80
 80007b8:	029b      	lsls	r3, r3, #10
 80007ba:	0018      	movs	r0, r3
 80007bc:	f7ff fdf4 	bl	80003a8 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin;
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	2204      	movs	r2, #4
 80007c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	2202      	movs	r2, #2
 80007ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	2200      	movs	r2, #0
 80007dc:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2201      	movs	r2, #1
 80007e2:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 80007e4:	1d3a      	adds	r2, r7, #4
 80007e6:	2390      	movs	r3, #144	; 0x90
 80007e8:	05db      	lsls	r3, r3, #23
 80007ea:	0011      	movs	r1, r2
 80007ec:	0018      	movs	r0, r3
 80007ee:	f000 fabf 	bl	8000d70 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = USART_RX_Pin;
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	2208      	movs	r2, #8
 80007f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2202      	movs	r2, #2
 80007fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	2201      	movs	r2, #1
 8000814:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8000816:	1d3a      	adds	r2, r7, #4
 8000818:	2390      	movs	r3, #144	; 0x90
 800081a:	05db      	lsls	r3, r3, #23
 800081c:	0011      	movs	r1, r2
 800081e:	0018      	movs	r0, r3
 8000820:	f000 faa6 	bl	8000d70 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 38400;
 8000824:	193b      	adds	r3, r7, r4
 8000826:	2296      	movs	r2, #150	; 0x96
 8000828:	0212      	lsls	r2, r2, #8
 800082a:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800082c:	0021      	movs	r1, r4
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2200      	movs	r2, #0
 8000832:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000834:	187b      	adds	r3, r7, r1
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000840:	187b      	adds	r3, r7, r1
 8000842:	220c      	movs	r2, #12
 8000844:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2200      	movs	r2, #0
 800084a:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000852:	187b      	adds	r3, r7, r1
 8000854:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <MX_USART2_UART_Init+0xf8>)
 8000856:	0019      	movs	r1, r3
 8000858:	0010      	movs	r0, r2
 800085a:	f000 fcbf 	bl	80011dc <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <MX_USART2_UART_Init+0xf8>)
 8000860:	0018      	movs	r0, r3
 8000862:	f7ff fe4f 	bl	8000504 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_USART2_UART_Init+0xf8>)
 8000868:	0018      	movs	r0, r3
 800086a:	f7ff fe33 	bl	80004d4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800086e:	4b04      	ldr	r3, [pc, #16]	; (8000880 <MX_USART2_UART_Init+0xf8>)
 8000870:	0018      	movs	r0, r3
 8000872:	f7ff fe21 	bl	80004b8 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	46bd      	mov	sp, r7
 800087a:	b00f      	add	sp, #60	; 0x3c
 800087c:	bd90      	pop	{r4, r7, pc}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	40004400 	.word	0x40004400

08000884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000884:	b590      	push	{r4, r7, lr}
 8000886:	b089      	sub	sp, #36	; 0x24
 8000888:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800088a:	2418      	movs	r4, #24
 800088c:	193b      	adds	r3, r7, r4
 800088e:	0018      	movs	r0, r3
 8000890:	2308      	movs	r3, #8
 8000892:	001a      	movs	r2, r3
 8000894:	2100      	movs	r1, #0
 8000896:	f000 fd63 	bl	8001360 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089a:	003b      	movs	r3, r7
 800089c:	0018      	movs	r0, r3
 800089e:	2318      	movs	r3, #24
 80008a0:	001a      	movs	r2, r3
 80008a2:	2100      	movs	r1, #0
 80008a4:	f000 fd5c 	bl	8001360 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80008a8:	2380      	movs	r3, #128	; 0x80
 80008aa:	031b      	lsls	r3, r3, #12
 80008ac:	0018      	movs	r0, r3
 80008ae:	f7ff fd7b 	bl	80003a8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 80008b2:	2380      	movs	r3, #128	; 0x80
 80008b4:	03db      	lsls	r3, r3, #15
 80008b6:	0018      	movs	r0, r3
 80008b8:	f7ff fd76 	bl	80003a8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80008bc:	2380      	movs	r3, #128	; 0x80
 80008be:	029b      	lsls	r3, r3, #10
 80008c0:	0018      	movs	r0, r3
 80008c2:	f7ff fd71 	bl	80003a8 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 80008c6:	2390      	movs	r3, #144	; 0x90
 80008c8:	05db      	lsls	r3, r3, #23
 80008ca:	2120      	movs	r1, #32
 80008cc:	0018      	movs	r0, r3
 80008ce:	f7ff fe7f 	bl	80005d0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80008d2:	4b1f      	ldr	r3, [pc, #124]	; (8000950 <MX_GPIO_Init+0xcc>)
 80008d4:	0019      	movs	r1, r3
 80008d6:	2002      	movs	r0, #2
 80008d8:	f7ff fda8 	bl	800042c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 80008dc:	2380      	movs	r3, #128	; 0x80
 80008de:	019b      	lsls	r3, r3, #6
 80008e0:	481c      	ldr	r0, [pc, #112]	; (8000954 <MX_GPIO_Init+0xd0>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	0019      	movs	r1, r3
 80008e6:	f7ff fe4b 	bl	8000580 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 80008ea:	2380      	movs	r3, #128	; 0x80
 80008ec:	019b      	lsls	r3, r3, #6
 80008ee:	4819      	ldr	r0, [pc, #100]	; (8000954 <MX_GPIO_Init+0xd0>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	0019      	movs	r1, r3
 80008f4:	f7ff fe28 	bl	8000548 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80008f8:	0021      	movs	r1, r4
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	2280      	movs	r2, #128	; 0x80
 80008fe:	0192      	lsls	r2, r2, #6
 8000900:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000902:	187b      	adds	r3, r7, r1
 8000904:	2201      	movs	r2, #1
 8000906:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000908:	187b      	adds	r3, r7, r1
 800090a:	2200      	movs	r2, #0
 800090c:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800090e:	187b      	adds	r3, r7, r1
 8000910:	2202      	movs	r2, #2
 8000912:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000914:	187b      	adds	r3, r7, r1
 8000916:	0018      	movs	r0, r3
 8000918:	f000 f8ea 	bl	8000af0 <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 800091c:	003b      	movs	r3, r7
 800091e:	2220      	movs	r2, #32
 8000920:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000922:	003b      	movs	r3, r7
 8000924:	2201      	movs	r2, #1
 8000926:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000928:	003b      	movs	r3, r7
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800092e:	003b      	movs	r3, r7
 8000930:	2200      	movs	r2, #0
 8000932:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000934:	003b      	movs	r3, r7
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800093a:	003a      	movs	r2, r7
 800093c:	2390      	movs	r3, #144	; 0x90
 800093e:	05db      	lsls	r3, r3, #23
 8000940:	0011      	movs	r1, r2
 8000942:	0018      	movs	r0, r3
 8000944:	f000 fa14 	bl	8000d70 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000948:	46c0      	nop			; (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	b009      	add	sp, #36	; 0x24
 800094e:	bd90      	pop	{r4, r7, pc}
 8000950:	00040003 	.word	0x00040003
 8000954:	48000800 	.word	0x48000800

08000958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800095c:	e7fe      	b.n	800095c <NMI_Handler+0x4>

0800095e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000962:	e7fe      	b.n	8000962 <HardFault_Handler+0x4>

08000964 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000968:	46c0      	nop			; (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800097c:	46c0      	nop			; (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800098c:	480d      	ldr	r0, [pc, #52]	; (80009c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800098e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000990:	480d      	ldr	r0, [pc, #52]	; (80009c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000992:	490e      	ldr	r1, [pc, #56]	; (80009cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000994:	4a0e      	ldr	r2, [pc, #56]	; (80009d0 <LoopForever+0xe>)
  movs r3, #0
 8000996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000998:	e002      	b.n	80009a0 <LoopCopyDataInit>

0800099a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800099a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800099c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800099e:	3304      	adds	r3, #4

080009a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a4:	d3f9      	bcc.n	800099a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009a6:	4a0b      	ldr	r2, [pc, #44]	; (80009d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009a8:	4c0b      	ldr	r4, [pc, #44]	; (80009d8 <LoopForever+0x16>)
  movs r3, #0
 80009aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009ac:	e001      	b.n	80009b2 <LoopFillZerobss>

080009ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b0:	3204      	adds	r2, #4

080009b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b4:	d3fb      	bcc.n	80009ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009b6:	f7ff ffe4 	bl	8000982 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80009ba:	f000 fcd9 	bl	8001370 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009be:	f7ff fe85 	bl	80006cc <main>

080009c2 <LoopForever>:

LoopForever:
    b LoopForever
 80009c2:	e7fe      	b.n	80009c2 <LoopForever>
  ldr   r0, =_estack
 80009c4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80009c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009cc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80009d0:	080014bc 	.word	0x080014bc
  ldr r2, =_sbss
 80009d4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80009d8:	20000020 	.word	0x20000020

080009dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009dc:	e7fe      	b.n	80009dc <ADC1_IRQHandler>
	...

080009e0 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <LL_EXTI_EnableIT_0_31+0x1c>)
 80009ea:	6819      	ldr	r1, [r3, #0]
 80009ec:	4b03      	ldr	r3, [pc, #12]	; (80009fc <LL_EXTI_EnableIT_0_31+0x1c>)
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	430a      	orrs	r2, r1
 80009f2:	601a      	str	r2, [r3, #0]
}
 80009f4:	46c0      	nop			; (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	b002      	add	sp, #8
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40010400 	.word	0x40010400

08000a00 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <LL_EXTI_DisableIT_0_31+0x20>)
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	43d9      	mvns	r1, r3
 8000a10:	4b03      	ldr	r3, [pc, #12]	; (8000a20 <LL_EXTI_DisableIT_0_31+0x20>)
 8000a12:	400a      	ands	r2, r1
 8000a14:	601a      	str	r2, [r3, #0]
}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	b002      	add	sp, #8
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	40010400 	.word	0x40010400

08000a24 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000a2c:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8000a2e:	6859      	ldr	r1, [r3, #4]
 8000a30:	4b03      	ldr	r3, [pc, #12]	; (8000a40 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	430a      	orrs	r2, r1
 8000a36:	605a      	str	r2, [r3, #4]

}
 8000a38:	46c0      	nop			; (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	b002      	add	sp, #8
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40010400 	.word	0x40010400

08000a44 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8000a4c:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <LL_EXTI_DisableEvent_0_31+0x20>)
 8000a4e:	685a      	ldr	r2, [r3, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	43d9      	mvns	r1, r3
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <LL_EXTI_DisableEvent_0_31+0x20>)
 8000a56:	400a      	ands	r2, r1
 8000a58:	605a      	str	r2, [r3, #4]
}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	b002      	add	sp, #8
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	40010400 	.word	0x40010400

08000a68 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000a70:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8000a72:	6899      	ldr	r1, [r3, #8]
 8000a74:	4b03      	ldr	r3, [pc, #12]	; (8000a84 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	430a      	orrs	r2, r1
 8000a7a:	609a      	str	r2, [r3, #8]

}
 8000a7c:	46c0      	nop			; (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	b002      	add	sp, #8
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40010400 	.word	0x40010400

08000a88 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8000a92:	689a      	ldr	r2, [r3, #8]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	43d9      	mvns	r1, r3
 8000a98:	4b03      	ldr	r3, [pc, #12]	; (8000aa8 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8000a9a:	400a      	ands	r2, r1
 8000a9c:	609a      	str	r2, [r3, #8]

}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	b002      	add	sp, #8
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	40010400 	.word	0x40010400

08000aac <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000ab4:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8000ab6:	68d9      	ldr	r1, [r3, #12]
 8000ab8:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	430a      	orrs	r2, r1
 8000abe:	60da      	str	r2, [r3, #12]
}
 8000ac0:	46c0      	nop			; (mov r8, r8)
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	b002      	add	sp, #8
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40010400 	.word	0x40010400

08000acc <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8000ad4:	4b05      	ldr	r3, [pc, #20]	; (8000aec <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8000ad6:	68da      	ldr	r2, [r3, #12]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	43d9      	mvns	r1, r3
 8000adc:	4b03      	ldr	r3, [pc, #12]	; (8000aec <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8000ade:	400a      	ands	r2, r1
 8000ae0:	60da      	str	r2, [r3, #12]
}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	b002      	add	sp, #8
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	40010400 	.word	0x40010400

08000af0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8000af8:	230f      	movs	r3, #15
 8000afa:	18fb      	adds	r3, r7, r3
 8000afc:	2200      	movs	r2, #0
 8000afe:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	791b      	ldrb	r3, [r3, #4]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d100      	bne.n	8000b0a <LL_EXTI_Init+0x1a>
 8000b08:	e068      	b.n	8000bdc <LL_EXTI_Init+0xec>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d100      	bne.n	8000b14 <LL_EXTI_Init+0x24>
 8000b12:	e06d      	b.n	8000bf0 <LL_EXTI_Init+0x100>
    {
      switch (EXTI_InitStruct->Mode)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	795b      	ldrb	r3, [r3, #5]
 8000b18:	2b02      	cmp	r3, #2
 8000b1a:	d01b      	beq.n	8000b54 <LL_EXTI_Init+0x64>
 8000b1c:	dc25      	bgt.n	8000b6a <LL_EXTI_Init+0x7a>
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d002      	beq.n	8000b28 <LL_EXTI_Init+0x38>
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d00b      	beq.n	8000b3e <LL_EXTI_Init+0x4e>
 8000b26:	e020      	b.n	8000b6a <LL_EXTI_Init+0x7a>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f7ff ff89 	bl	8000a44 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	0018      	movs	r0, r3
 8000b38:	f7ff ff52 	bl	80009e0 <LL_EXTI_EnableIT_0_31>
          break;
 8000b3c:	e01a      	b.n	8000b74 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	0018      	movs	r0, r3
 8000b44:	f7ff ff5c 	bl	8000a00 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f7ff ff69 	bl	8000a24 <LL_EXTI_EnableEvent_0_31>
          break;
 8000b52:	e00f      	b.n	8000b74 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f7ff ff41 	bl	80009e0 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	0018      	movs	r0, r3
 8000b64:	f7ff ff5e 	bl	8000a24 <LL_EXTI_EnableEvent_0_31>
          break;
 8000b68:	e004      	b.n	8000b74 <LL_EXTI_Init+0x84>
        default:
          status = ERROR;
 8000b6a:	230f      	movs	r3, #15
 8000b6c:	18fb      	adds	r3, r7, r3
 8000b6e:	2201      	movs	r2, #1
 8000b70:	701a      	strb	r2, [r3, #0]
          break;
 8000b72:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	799b      	ldrb	r3, [r3, #6]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d039      	beq.n	8000bf0 <LL_EXTI_Init+0x100>
      {
        switch (EXTI_InitStruct->Trigger)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	799b      	ldrb	r3, [r3, #6]
 8000b80:	2b03      	cmp	r3, #3
 8000b82:	d01b      	beq.n	8000bbc <LL_EXTI_Init+0xcc>
 8000b84:	dc25      	bgt.n	8000bd2 <LL_EXTI_Init+0xe2>
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d002      	beq.n	8000b90 <LL_EXTI_Init+0xa0>
 8000b8a:	2b02      	cmp	r3, #2
 8000b8c:	d00b      	beq.n	8000ba6 <LL_EXTI_Init+0xb6>
 8000b8e:	e020      	b.n	8000bd2 <LL_EXTI_Init+0xe2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	0018      	movs	r0, r3
 8000b96:	f7ff ff99 	bl	8000acc <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f7ff ff62 	bl	8000a68 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8000ba4:	e024      	b.n	8000bf0 <LL_EXTI_Init+0x100>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	0018      	movs	r0, r3
 8000bac:	f7ff ff6c 	bl	8000a88 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f7ff ff79 	bl	8000aac <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000bba:	e019      	b.n	8000bf0 <LL_EXTI_Init+0x100>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f7ff ff51 	bl	8000a68 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f7ff ff6e 	bl	8000aac <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000bd0:	e00e      	b.n	8000bf0 <LL_EXTI_Init+0x100>
          default:
            status = ERROR;
 8000bd2:	230f      	movs	r3, #15
 8000bd4:	18fb      	adds	r3, r7, r3
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	701a      	strb	r2, [r3, #0]
            break;
 8000bda:	e009      	b.n	8000bf0 <LL_EXTI_Init+0x100>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	0018      	movs	r0, r3
 8000be2:	f7ff ff0d 	bl	8000a00 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	0018      	movs	r0, r3
 8000bec:	f7ff ff2a 	bl	8000a44 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 8000bf0:	230f      	movs	r3, #15
 8000bf2:	18fb      	adds	r3, r7, r3
 8000bf4:	781b      	ldrb	r3, [r3, #0]
}
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	b004      	add	sp, #16
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <LL_GPIO_SetPinMode>:
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b084      	sub	sp, #16
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	60f8      	str	r0, [r7, #12]
 8000c06:	60b9      	str	r1, [r7, #8]
 8000c08:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	6819      	ldr	r1, [r3, #0]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	435b      	muls	r3, r3
 8000c12:	001a      	movs	r2, r3
 8000c14:	0013      	movs	r3, r2
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	189b      	adds	r3, r3, r2
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	400b      	ands	r3, r1
 8000c1e:	001a      	movs	r2, r3
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	435b      	muls	r3, r3
 8000c24:	6879      	ldr	r1, [r7, #4]
 8000c26:	434b      	muls	r3, r1
 8000c28:	431a      	orrs	r2, r3
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	601a      	str	r2, [r3, #0]
}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	46bd      	mov	sp, r7
 8000c32:	b004      	add	sp, #16
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <LL_GPIO_SetPinOutputType>:
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b084      	sub	sp, #16
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	60f8      	str	r0, [r7, #12]
 8000c3e:	60b9      	str	r1, [r7, #8]
 8000c40:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	43d2      	mvns	r2, r2
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	6879      	ldr	r1, [r7, #4]
 8000c50:	434b      	muls	r3, r1
 8000c52:	431a      	orrs	r2, r3
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	605a      	str	r2, [r3, #4]
}
 8000c58:	46c0      	nop			; (mov r8, r8)
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	b004      	add	sp, #16
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <LL_GPIO_SetPinSpeed>:
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	6899      	ldr	r1, [r3, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	435b      	muls	r3, r3
 8000c74:	001a      	movs	r2, r3
 8000c76:	0013      	movs	r3, r2
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	189b      	adds	r3, r3, r2
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	400b      	ands	r3, r1
 8000c80:	001a      	movs	r2, r3
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	435b      	muls	r3, r3
 8000c86:	6879      	ldr	r1, [r7, #4]
 8000c88:	434b      	muls	r3, r1
 8000c8a:	431a      	orrs	r2, r3
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	609a      	str	r2, [r3, #8]
}
 8000c90:	46c0      	nop			; (mov r8, r8)
 8000c92:	46bd      	mov	sp, r7
 8000c94:	b004      	add	sp, #16
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <LL_GPIO_SetPinPull>:
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	68d9      	ldr	r1, [r3, #12]
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	435b      	muls	r3, r3
 8000cac:	001a      	movs	r2, r3
 8000cae:	0013      	movs	r3, r2
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	189b      	adds	r3, r3, r2
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	400b      	ands	r3, r1
 8000cb8:	001a      	movs	r2, r3
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	435b      	muls	r3, r3
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	434b      	muls	r3, r1
 8000cc2:	431a      	orrs	r2, r3
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	60da      	str	r2, [r3, #12]
}
 8000cc8:	46c0      	nop			; (mov r8, r8)
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	b004      	add	sp, #16
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <LL_GPIO_SetAFPin_0_7>:
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	6a19      	ldr	r1, [r3, #32]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	435b      	muls	r3, r3
 8000ce4:	68ba      	ldr	r2, [r7, #8]
 8000ce6:	4353      	muls	r3, r2
 8000ce8:	68ba      	ldr	r2, [r7, #8]
 8000cea:	435a      	muls	r2, r3
 8000cec:	0013      	movs	r3, r2
 8000cee:	011b      	lsls	r3, r3, #4
 8000cf0:	1a9b      	subs	r3, r3, r2
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	400b      	ands	r3, r1
 8000cf6:	001a      	movs	r2, r3
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	435b      	muls	r3, r3
 8000cfc:	68b9      	ldr	r1, [r7, #8]
 8000cfe:	434b      	muls	r3, r1
 8000d00:	68b9      	ldr	r1, [r7, #8]
 8000d02:	434b      	muls	r3, r1
 8000d04:	6879      	ldr	r1, [r7, #4]
 8000d06:	434b      	muls	r3, r1
 8000d08:	431a      	orrs	r2, r3
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	621a      	str	r2, [r3, #32]
}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	46bd      	mov	sp, r7
 8000d12:	b004      	add	sp, #16
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <LL_GPIO_SetAFPin_8_15>:
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b084      	sub	sp, #16
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	60f8      	str	r0, [r7, #12]
 8000d1e:	60b9      	str	r1, [r7, #8]
 8000d20:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	0a1b      	lsrs	r3, r3, #8
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	0a12      	lsrs	r2, r2, #8
 8000d2e:	4353      	muls	r3, r2
 8000d30:	68ba      	ldr	r2, [r7, #8]
 8000d32:	0a12      	lsrs	r2, r2, #8
 8000d34:	4353      	muls	r3, r2
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	0a12      	lsrs	r2, r2, #8
 8000d3a:	435a      	muls	r2, r3
 8000d3c:	0013      	movs	r3, r2
 8000d3e:	011b      	lsls	r3, r3, #4
 8000d40:	1a9b      	subs	r3, r3, r2
 8000d42:	43db      	mvns	r3, r3
 8000d44:	400b      	ands	r3, r1
 8000d46:	001a      	movs	r2, r3
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	0a1b      	lsrs	r3, r3, #8
 8000d4c:	68b9      	ldr	r1, [r7, #8]
 8000d4e:	0a09      	lsrs	r1, r1, #8
 8000d50:	434b      	muls	r3, r1
 8000d52:	68b9      	ldr	r1, [r7, #8]
 8000d54:	0a09      	lsrs	r1, r1, #8
 8000d56:	434b      	muls	r3, r1
 8000d58:	68b9      	ldr	r1, [r7, #8]
 8000d5a:	0a09      	lsrs	r1, r1, #8
 8000d5c:	434b      	muls	r3, r1
 8000d5e:	6879      	ldr	r1, [r7, #4]
 8000d60:	434b      	muls	r3, r1
 8000d62:	431a      	orrs	r2, r3
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000d68:	46c0      	nop			; (mov r8, r8)
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	b004      	add	sp, #16
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000d7e:	e048      	b.n	8000e12 <LL_GPIO_Init+0xa2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2101      	movs	r1, #1
 8000d86:	68fa      	ldr	r2, [r7, #12]
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	000a      	movs	r2, r1
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d03a      	beq.n	8000e0c <LL_GPIO_Init+0x9c>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d003      	beq.n	8000da6 <LL_GPIO_Init+0x36>
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d10e      	bne.n	8000dc4 <LL_GPIO_Init+0x54>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	689a      	ldr	r2, [r3, #8]
 8000daa:	68b9      	ldr	r1, [r7, #8]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	0018      	movs	r0, r3
 8000db0:	f7ff ff56 	bl	8000c60 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	6819      	ldr	r1, [r3, #0]
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	68da      	ldr	r2, [r3, #12]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f7ff ff39 	bl	8000c36 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	691a      	ldr	r2, [r3, #16]
 8000dc8:	68b9      	ldr	r1, [r7, #8]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f7ff ff63 	bl	8000c98 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d111      	bne.n	8000dfe <LL_GPIO_Init+0x8e>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	2bff      	cmp	r3, #255	; 0xff
 8000dde:	d807      	bhi.n	8000df0 <LL_GPIO_Init+0x80>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	695a      	ldr	r2, [r3, #20]
 8000de4:	68b9      	ldr	r1, [r7, #8]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	0018      	movs	r0, r3
 8000dea:	f7ff ff71 	bl	8000cd0 <LL_GPIO_SetAFPin_0_7>
 8000dee:	e006      	b.n	8000dfe <LL_GPIO_Init+0x8e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	695a      	ldr	r2, [r3, #20]
 8000df4:	68b9      	ldr	r1, [r7, #8]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f7ff ff8c 	bl	8000d16 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685a      	ldr	r2, [r3, #4]
 8000e02:	68b9      	ldr	r1, [r7, #8]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	0018      	movs	r0, r3
 8000e08:	f7ff fef9 	bl	8000bfe <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	40da      	lsrs	r2, r3
 8000e1a:	1e13      	subs	r3, r2, #0
 8000e1c:	d1b0      	bne.n	8000d80 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8000e1e:	2300      	movs	r3, #0
}
 8000e20:	0018      	movs	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b004      	add	sp, #16
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <LL_RCC_HSI_IsReady>:
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000e2c:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <LL_RCC_HSI_IsReady+0x1c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2202      	movs	r2, #2
 8000e32:	4013      	ands	r3, r2
 8000e34:	3b02      	subs	r3, #2
 8000e36:	425a      	negs	r2, r3
 8000e38:	4153      	adcs	r3, r2
 8000e3a:	b2db      	uxtb	r3, r3
}
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	40021000 	.word	0x40021000

08000e48 <LL_RCC_LSE_IsReady>:
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8000e4c:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <LL_RCC_LSE_IsReady+0x1c>)
 8000e4e:	6a1b      	ldr	r3, [r3, #32]
 8000e50:	2202      	movs	r2, #2
 8000e52:	4013      	ands	r3, r2
 8000e54:	3b02      	subs	r3, #2
 8000e56:	425a      	negs	r2, r3
 8000e58:	4153      	adcs	r3, r2
 8000e5a:	b2db      	uxtb	r3, r3
}
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	40021000 	.word	0x40021000

08000e68 <LL_RCC_GetSysClkSource>:
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000e6c:	4b03      	ldr	r3, [pc, #12]	; (8000e7c <LL_RCC_GetSysClkSource+0x14>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	220c      	movs	r2, #12
 8000e72:	4013      	ands	r3, r2
}
 8000e74:	0018      	movs	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	40021000 	.word	0x40021000

08000e80 <LL_RCC_GetAHBPrescaler>:
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000e84:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <LL_RCC_GetAHBPrescaler+0x14>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	22f0      	movs	r2, #240	; 0xf0
 8000e8a:	4013      	ands	r3, r2
}
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	40021000 	.word	0x40021000

08000e98 <LL_RCC_GetAPB1Prescaler>:
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <LL_RCC_GetAPB1Prescaler+0x14>)
 8000e9e:	685a      	ldr	r2, [r3, #4]
 8000ea0:	23e0      	movs	r3, #224	; 0xe0
 8000ea2:	00db      	lsls	r3, r3, #3
 8000ea4:	4013      	ands	r3, r2
}
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40021000 	.word	0x40021000

08000eb0 <LL_RCC_GetUSARTClockSource>:
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <LL_RCC_GetUSARTClockSource+0x24>)
 8000eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebc:	2103      	movs	r1, #3
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	4091      	lsls	r1, r2
 8000ec2:	000a      	movs	r2, r1
 8000ec4:	401a      	ands	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	061b      	lsls	r3, r3, #24
 8000eca:	4313      	orrs	r3, r2
}
 8000ecc:	0018      	movs	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	b002      	add	sp, #8
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40021000 	.word	0x40021000

08000ed8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <LL_RCC_PLL_GetMainSource+0x14>)
 8000ede:	685a      	ldr	r2, [r3, #4]
 8000ee0:	2380      	movs	r3, #128	; 0x80
 8000ee2:	025b      	lsls	r3, r3, #9
 8000ee4:	4013      	ands	r3, r2
}
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40021000 	.word	0x40021000

08000ef0 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8000ef6:	685a      	ldr	r2, [r3, #4]
 8000ef8:	23f0      	movs	r3, #240	; 0xf0
 8000efa:	039b      	lsls	r3, r3, #14
 8000efc:	4013      	ands	r3, r2
}
 8000efe:	0018      	movs	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40021000 	.word	0x40021000

08000f08 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8000f0c:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <LL_RCC_PLL_GetPrediv+0x14>)
 8000f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f10:	220f      	movs	r2, #15
 8000f12:	4013      	ands	r3, r2
}
 8000f14:	0018      	movs	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	40021000 	.word	0x40021000

08000f20 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8000f28:	f000 f85a 	bl	8000fe0 <RCC_GetSystemClockFreq>
 8000f2c:	0002      	movs	r2, r0
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	0018      	movs	r0, r3
 8000f38:	f000 f878 	bl	800102c <RCC_GetHCLKClockFreq>
 8000f3c:	0002      	movs	r2, r0
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	0018      	movs	r0, r3
 8000f48:	f000 f886 	bl	8001058 <RCC_GetPCLK1ClockFreq>
 8000f4c:	0002      	movs	r2, r0
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	609a      	str	r2, [r3, #8]
}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	46bd      	mov	sp, r7
 8000f56:	b002      	add	sp, #8
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8000f64:	2300      	movs	r3, #0
 8000f66:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d130      	bne.n	8000fd0 <LL_RCC_GetUSARTClockFreq+0x74>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	0018      	movs	r0, r3
 8000f72:	f7ff ff9d 	bl	8000eb0 <LL_RCC_GetUSARTClockSource>
 8000f76:	0003      	movs	r3, r0
 8000f78:	2b03      	cmp	r3, #3
 8000f7a:	d00a      	beq.n	8000f92 <LL_RCC_GetUSARTClockFreq+0x36>
 8000f7c:	d818      	bhi.n	8000fb0 <LL_RCC_GetUSARTClockFreq+0x54>
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d002      	beq.n	8000f88 <LL_RCC_GetUSARTClockFreq+0x2c>
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d00c      	beq.n	8000fa0 <LL_RCC_GetUSARTClockFreq+0x44>
 8000f86:	e013      	b.n	8000fb0 <LL_RCC_GetUSARTClockFreq+0x54>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8000f88:	f000 f82a 	bl	8000fe0 <RCC_GetSystemClockFreq>
 8000f8c:	0003      	movs	r3, r0
 8000f8e:	60fb      	str	r3, [r7, #12]
        break;
 8000f90:	e01e      	b.n	8000fd0 <LL_RCC_GetUSARTClockFreq+0x74>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8000f92:	f7ff ff49 	bl	8000e28 <LL_RCC_HSI_IsReady>
 8000f96:	1e03      	subs	r3, r0, #0
 8000f98:	d017      	beq.n	8000fca <LL_RCC_GetUSARTClockFreq+0x6e>
        {
          usart_frequency = HSI_VALUE;
 8000f9a:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <LL_RCC_GetUSARTClockFreq+0x80>)
 8000f9c:	60fb      	str	r3, [r7, #12]
        }
        break;
 8000f9e:	e014      	b.n	8000fca <LL_RCC_GetUSARTClockFreq+0x6e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8000fa0:	f7ff ff52 	bl	8000e48 <LL_RCC_LSE_IsReady>
 8000fa4:	1e03      	subs	r3, r0, #0
 8000fa6:	d012      	beq.n	8000fce <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = LSE_VALUE;
 8000fa8:	2380      	movs	r3, #128	; 0x80
 8000faa:	021b      	lsls	r3, r3, #8
 8000fac:	60fb      	str	r3, [r7, #12]
        }
        break;
 8000fae:	e00e      	b.n	8000fce <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8000fb0:	f000 f816 	bl	8000fe0 <RCC_GetSystemClockFreq>
 8000fb4:	0003      	movs	r3, r0
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f000 f838 	bl	800102c <RCC_GetHCLKClockFreq>
 8000fbc:	0003      	movs	r3, r0
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f000 f84a 	bl	8001058 <RCC_GetPCLK1ClockFreq>
 8000fc4:	0003      	movs	r3, r0
 8000fc6:	60fb      	str	r3, [r7, #12]
        break;
 8000fc8:	e002      	b.n	8000fd0 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	e000      	b.n	8000fd0 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 8000fce:	46c0      	nop			; (mov r8, r8)
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
}
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	b004      	add	sp, #16
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	007a1200 	.word	0x007a1200

08000fe0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8000fea:	f7ff ff3d 	bl	8000e68 <LL_RCC_GetSysClkSource>
 8000fee:	0003      	movs	r3, r0
 8000ff0:	2b08      	cmp	r3, #8
 8000ff2:	d00b      	beq.n	800100c <RCC_GetSystemClockFreq+0x2c>
 8000ff4:	d80f      	bhi.n	8001016 <RCC_GetSystemClockFreq+0x36>
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d002      	beq.n	8001000 <RCC_GetSystemClockFreq+0x20>
 8000ffa:	2b04      	cmp	r3, #4
 8000ffc:	d003      	beq.n	8001006 <RCC_GetSystemClockFreq+0x26>
 8000ffe:	e00a      	b.n	8001016 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001000:	4b09      	ldr	r3, [pc, #36]	; (8001028 <RCC_GetSystemClockFreq+0x48>)
 8001002:	607b      	str	r3, [r7, #4]
      break;
 8001004:	e00a      	b.n	800101c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001006:	4b08      	ldr	r3, [pc, #32]	; (8001028 <RCC_GetSystemClockFreq+0x48>)
 8001008:	607b      	str	r3, [r7, #4]
      break;
 800100a:	e007      	b.n	800101c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800100c:	f000 f838 	bl	8001080 <RCC_PLL_GetFreqDomain_SYS>
 8001010:	0003      	movs	r3, r0
 8001012:	607b      	str	r3, [r7, #4]
      break;
 8001014:	e002      	b.n	800101c <RCC_GetSystemClockFreq+0x3c>
      frequency = HSI48_VALUE;
      break;
#endif /* RCC_HSI48_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8001016:	4b04      	ldr	r3, [pc, #16]	; (8001028 <RCC_GetSystemClockFreq+0x48>)
 8001018:	607b      	str	r3, [r7, #4]
      break;
 800101a:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 800101c:	687b      	ldr	r3, [r7, #4]
}
 800101e:	0018      	movs	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	b002      	add	sp, #8
 8001024:	bd80      	pop	{r7, pc}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	007a1200 	.word	0x007a1200

0800102c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001034:	f7ff ff24 	bl	8000e80 <LL_RCC_GetAHBPrescaler>
 8001038:	0003      	movs	r3, r0
 800103a:	091b      	lsrs	r3, r3, #4
 800103c:	220f      	movs	r2, #15
 800103e:	4013      	ands	r3, r2
 8001040:	4a04      	ldr	r2, [pc, #16]	; (8001054 <RCC_GetHCLKClockFreq+0x28>)
 8001042:	5cd3      	ldrb	r3, [r2, r3]
 8001044:	001a      	movs	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	40d3      	lsrs	r3, r2
}
 800104a:	0018      	movs	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	b002      	add	sp, #8
 8001050:	bd80      	pop	{r7, pc}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	0800149c 	.word	0x0800149c

08001058 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001060:	f7ff ff1a 	bl	8000e98 <LL_RCC_GetAPB1Prescaler>
 8001064:	0003      	movs	r3, r0
 8001066:	0a1b      	lsrs	r3, r3, #8
 8001068:	4a04      	ldr	r2, [pc, #16]	; (800107c <RCC_GetPCLK1ClockFreq+0x24>)
 800106a:	5cd3      	ldrb	r3, [r2, r3]
 800106c:	001a      	movs	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	40d3      	lsrs	r3, r2
}
 8001072:	0018      	movs	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	b002      	add	sp, #8
 8001078:	bd80      	pop	{r7, pc}
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	080014ac 	.word	0x080014ac

08001080 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8001086:	2300      	movs	r3, #0
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	2300      	movs	r3, #0
 800108c:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800108e:	f7ff ff23 	bl	8000ed8 <LL_RCC_PLL_GetMainSource>
 8001092:	0003      	movs	r3, r0
 8001094:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d005      	beq.n	80010a8 <RCC_PLL_GetFreqDomain_SYS+0x28>
 800109c:	683a      	ldr	r2, [r7, #0]
 800109e:	2380      	movs	r3, #128	; 0x80
 80010a0:	025b      	lsls	r3, r3, #9
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d003      	beq.n	80010ae <RCC_PLL_GetFreqDomain_SYS+0x2e>
 80010a6:	e005      	b.n	80010b4 <RCC_PLL_GetFreqDomain_SYS+0x34>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 80010aa:	607b      	str	r3, [r7, #4]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80010ac:	e005      	b.n	80010ba <RCC_PLL_GetFreqDomain_SYS+0x3a>
      pllinputfreq = HSI48_VALUE;
      break;
#endif /* RCC_HSI48_SUPPORT */

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80010ae:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 80010b0:	607b      	str	r3, [r7, #4]
      break;
 80010b2:	e002      	b.n	80010ba <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 80010b6:	607b      	str	r3, [r7, #4]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80010b8:	46c0      	nop			; (mov r8, r8)
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 80010ba:	f7ff ff25 	bl	8000f08 <LL_RCC_PLL_GetPrediv>
 80010be:	0003      	movs	r3, r0
 80010c0:	3301      	adds	r3, #1
 80010c2:	0019      	movs	r1, r3
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff f81f 	bl	8000108 <__udivsi3>
 80010ca:	0003      	movs	r3, r0
 80010cc:	001c      	movs	r4, r3
 80010ce:	f7ff ff0f 	bl	8000ef0 <LL_RCC_PLL_GetMultiplicator>
 80010d2:	0003      	movs	r3, r0
 80010d4:	0c9b      	lsrs	r3, r3, #18
 80010d6:	220f      	movs	r2, #15
 80010d8:	4013      	ands	r3, r2
 80010da:	3302      	adds	r3, #2
 80010dc:	4363      	muls	r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 80010de:	0018      	movs	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	b003      	add	sp, #12
 80010e4:	bd90      	pop	{r4, r7, pc}
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	003d0900 	.word	0x003d0900
 80010ec:	007a1200 	.word	0x007a1200

080010f0 <LL_USART_IsEnabled>:
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2201      	movs	r2, #1
 80010fe:	4013      	ands	r3, r2
 8001100:	2b01      	cmp	r3, #1
 8001102:	d101      	bne.n	8001108 <LL_USART_IsEnabled+0x18>
 8001104:	2301      	movs	r3, #1
 8001106:	e000      	b.n	800110a <LL_USART_IsEnabled+0x1a>
 8001108:	2300      	movs	r3, #0
}
 800110a:	0018      	movs	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	b002      	add	sp, #8
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <LL_USART_SetStopBitsLength>:
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	4a05      	ldr	r2, [pc, #20]	; (8001138 <LL_USART_SetStopBitsLength+0x24>)
 8001124:	401a      	ands	r2, r3
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	431a      	orrs	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	605a      	str	r2, [r3, #4]
}
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	46bd      	mov	sp, r7
 8001132:	b002      	add	sp, #8
 8001134:	bd80      	pop	{r7, pc}
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	ffffcfff 	.word	0xffffcfff

0800113c <LL_USART_SetHWFlowCtrl>:
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	4a05      	ldr	r2, [pc, #20]	; (8001160 <LL_USART_SetHWFlowCtrl+0x24>)
 800114c:	401a      	ands	r2, r3
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	431a      	orrs	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	609a      	str	r2, [r3, #8]
}
 8001156:	46c0      	nop			; (mov r8, r8)
 8001158:	46bd      	mov	sp, r7
 800115a:	b002      	add	sp, #8
 800115c:	bd80      	pop	{r7, pc}
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	fffffcff 	.word	0xfffffcff

08001164 <LL_USART_SetBaudRate>:
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	2380      	movs	r3, #128	; 0x80
 8001176:	021b      	lsls	r3, r3, #8
 8001178:	429a      	cmp	r2, r3
 800117a:	d11c      	bne.n	80011b6 <LL_USART_SetBaudRate+0x52>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	005a      	lsls	r2, r3, #1
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	085b      	lsrs	r3, r3, #1
 8001184:	18d3      	adds	r3, r2, r3
 8001186:	6839      	ldr	r1, [r7, #0]
 8001188:	0018      	movs	r0, r3
 800118a:	f7fe ffbd 	bl	8000108 <__udivsi3>
 800118e:	0003      	movs	r3, r0
 8001190:	b29b      	uxth	r3, r3
 8001192:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	4a10      	ldr	r2, [pc, #64]	; (80011d8 <LL_USART_SetBaudRate+0x74>)
 8001198:	4013      	ands	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	085b      	lsrs	r3, r3, #1
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	001a      	movs	r2, r3
 80011a4:	2307      	movs	r3, #7
 80011a6:	4013      	ands	r3, r2
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	60da      	str	r2, [r3, #12]
}
 80011b4:	e00c      	b.n	80011d0 <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	085a      	lsrs	r2, r3, #1
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	18d3      	adds	r3, r2, r3
 80011be:	6839      	ldr	r1, [r7, #0]
 80011c0:	0018      	movs	r0, r3
 80011c2:	f7fe ffa1 	bl	8000108 <__udivsi3>
 80011c6:	0003      	movs	r3, r0
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	001a      	movs	r2, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	60da      	str	r2, [r3, #12]
}
 80011d0:	46c0      	nop			; (mov r8, r8)
 80011d2:	46bd      	mov	sp, r7
 80011d4:	b006      	add	sp, #24
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	0000fff0 	.word	0x0000fff0

080011dc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80011dc:	b590      	push	{r4, r7, lr}
 80011de:	b089      	sub	sp, #36	; 0x24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80011e6:	231f      	movs	r3, #31
 80011e8:	18fb      	adds	r3, r7, r3
 80011ea:	2201      	movs	r2, #1
 80011ec:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	0018      	movs	r0, r3
 80011f6:	f7ff ff7b 	bl	80010f0 <LL_USART_IsEnabled>
 80011fa:	1e03      	subs	r3, r0, #0
 80011fc:	d148      	bne.n	8001290 <LL_USART_Init+0xb4>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a27      	ldr	r2, [pc, #156]	; (80012a0 <LL_USART_Init+0xc4>)
 8001204:	401a      	ands	r2, r3
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	6859      	ldr	r1, [r3, #4]
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	4319      	orrs	r1, r3
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	4319      	orrs	r1, r3
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	430b      	orrs	r3, r1
 800121c:	431a      	orrs	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	689a      	ldr	r2, [r3, #8]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	0011      	movs	r1, r2
 800122a:	0018      	movs	r0, r3
 800122c:	f7ff ff72 	bl	8001114 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	695a      	ldr	r2, [r3, #20]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	0011      	movs	r1, r2
 8001238:	0018      	movs	r0, r3
 800123a:	f7ff ff7f 	bl	800113c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a18      	ldr	r2, [pc, #96]	; (80012a4 <LL_USART_Init+0xc8>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d105      	bne.n	8001252 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8001246:	2000      	movs	r0, #0
 8001248:	f7ff fe88 	bl	8000f5c <LL_RCC_GetUSARTClockFreq>
 800124c:	0003      	movs	r3, r0
 800124e:	61bb      	str	r3, [r7, #24]
 8001250:	e00b      	b.n	800126a <LL_USART_Init+0x8e>
    }
#if defined(USART2)
    else if (USARTx == USART2)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a14      	ldr	r2, [pc, #80]	; (80012a8 <LL_USART_Init+0xcc>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d107      	bne.n	800126a <LL_USART_Init+0x8e>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800125a:	240c      	movs	r4, #12
 800125c:	193b      	adds	r3, r7, r4
 800125e:	0018      	movs	r0, r3
 8001260:	f7ff fe5e 	bl	8000f20 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8001264:	193b      	adds	r3, r7, r4
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d00f      	beq.n	8001290 <LL_USART_Init+0xb4>
        && (USART_InitStruct->BaudRate != 0U))
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d00b      	beq.n	8001290 <LL_USART_Init+0xb4>
    {
      status = SUCCESS;
 8001278:	231f      	movs	r3, #31
 800127a:	18fb      	adds	r3, r7, r3
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	699a      	ldr	r2, [r3, #24]
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	69b9      	ldr	r1, [r7, #24]
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff ff6a 	bl	8001164 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001290:	231f      	movs	r3, #31
 8001292:	18fb      	adds	r3, r7, r3
 8001294:	781b      	ldrb	r3, [r3, #0]
}
 8001296:	0018      	movs	r0, r3
 8001298:	46bd      	mov	sp, r7
 800129a:	b009      	add	sp, #36	; 0x24
 800129c:	bd90      	pop	{r4, r7, pc}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	ffff69f3 	.word	0xffff69f3
 80012a4:	40013800 	.word	0x40013800
 80012a8:	40004400 	.word	0x40004400

080012ac <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80012b6:	6839      	ldr	r1, [r7, #0]
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7fe ff25 	bl	8000108 <__udivsi3>
 80012be:	0003      	movs	r3, r0
 80012c0:	001a      	movs	r2, r3
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <LL_InitTick+0x30>)
 80012c4:	3a01      	subs	r2, #1
 80012c6:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80012c8:	4b04      	ldr	r3, [pc, #16]	; (80012dc <LL_InitTick+0x30>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ce:	4b03      	ldr	r3, [pc, #12]	; (80012dc <LL_InitTick+0x30>)
 80012d0:	2205      	movs	r2, #5
 80012d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80012d4:	46c0      	nop			; (mov r8, r8)
 80012d6:	46bd      	mov	sp, r7
 80012d8:	b002      	add	sp, #8
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	e000e010 	.word	0xe000e010

080012e0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80012e8:	23fa      	movs	r3, #250	; 0xfa
 80012ea:	009a      	lsls	r2, r3, #2
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	0011      	movs	r1, r2
 80012f0:	0018      	movs	r0, r3
 80012f2:	f7ff ffdb 	bl	80012ac <LL_InitTick>
}
 80012f6:	46c0      	nop			; (mov r8, r8)
 80012f8:	46bd      	mov	sp, r7
 80012fa:	b002      	add	sp, #8
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001308:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <LL_mDelay+0x40>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800130e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3301      	adds	r3, #1
 8001314:	d00c      	beq.n	8001330 <LL_mDelay+0x30>
  {
    Delay++;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3301      	adds	r3, #1
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	e008      	b.n	8001330 <LL_mDelay+0x30>
  }

  while (Delay)
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800131e:	4b08      	ldr	r3, [pc, #32]	; (8001340 <LL_mDelay+0x40>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	2380      	movs	r3, #128	; 0x80
 8001324:	025b      	lsls	r3, r3, #9
 8001326:	4013      	ands	r3, r2
 8001328:	d002      	beq.n	8001330 <LL_mDelay+0x30>
    {
      Delay--;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	3b01      	subs	r3, #1
 800132e:	607b      	str	r3, [r7, #4]
  while (Delay)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1f3      	bne.n	800131e <LL_mDelay+0x1e>
    }
  }
}
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	46c0      	nop			; (mov r8, r8)
 800133a:	46bd      	mov	sp, r7
 800133c:	b004      	add	sp, #16
 800133e:	bd80      	pop	{r7, pc}
 8001340:	e000e010 	.word	0xe000e010

08001344 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800134c:	4b03      	ldr	r3, [pc, #12]	; (800135c <LL_SetSystemCoreClock+0x18>)
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	601a      	str	r2, [r3, #0]
}
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	46bd      	mov	sp, r7
 8001356:	b002      	add	sp, #8
 8001358:	bd80      	pop	{r7, pc}
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	20000000 	.word	0x20000000

08001360 <memset>:
 8001360:	0003      	movs	r3, r0
 8001362:	1882      	adds	r2, r0, r2
 8001364:	4293      	cmp	r3, r2
 8001366:	d100      	bne.n	800136a <memset+0xa>
 8001368:	4770      	bx	lr
 800136a:	7019      	strb	r1, [r3, #0]
 800136c:	3301      	adds	r3, #1
 800136e:	e7f9      	b.n	8001364 <memset+0x4>

08001370 <__libc_init_array>:
 8001370:	b570      	push	{r4, r5, r6, lr}
 8001372:	2600      	movs	r6, #0
 8001374:	4c0c      	ldr	r4, [pc, #48]	; (80013a8 <__libc_init_array+0x38>)
 8001376:	4d0d      	ldr	r5, [pc, #52]	; (80013ac <__libc_init_array+0x3c>)
 8001378:	1b64      	subs	r4, r4, r5
 800137a:	10a4      	asrs	r4, r4, #2
 800137c:	42a6      	cmp	r6, r4
 800137e:	d109      	bne.n	8001394 <__libc_init_array+0x24>
 8001380:	2600      	movs	r6, #0
 8001382:	f000 f819 	bl	80013b8 <_init>
 8001386:	4c0a      	ldr	r4, [pc, #40]	; (80013b0 <__libc_init_array+0x40>)
 8001388:	4d0a      	ldr	r5, [pc, #40]	; (80013b4 <__libc_init_array+0x44>)
 800138a:	1b64      	subs	r4, r4, r5
 800138c:	10a4      	asrs	r4, r4, #2
 800138e:	42a6      	cmp	r6, r4
 8001390:	d105      	bne.n	800139e <__libc_init_array+0x2e>
 8001392:	bd70      	pop	{r4, r5, r6, pc}
 8001394:	00b3      	lsls	r3, r6, #2
 8001396:	58eb      	ldr	r3, [r5, r3]
 8001398:	4798      	blx	r3
 800139a:	3601      	adds	r6, #1
 800139c:	e7ee      	b.n	800137c <__libc_init_array+0xc>
 800139e:	00b3      	lsls	r3, r6, #2
 80013a0:	58eb      	ldr	r3, [r5, r3]
 80013a2:	4798      	blx	r3
 80013a4:	3601      	adds	r6, #1
 80013a6:	e7f2      	b.n	800138e <__libc_init_array+0x1e>
 80013a8:	080014b4 	.word	0x080014b4
 80013ac:	080014b4 	.word	0x080014b4
 80013b0:	080014b8 	.word	0x080014b8
 80013b4:	080014b4 	.word	0x080014b4

080013b8 <_init>:
 80013b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013be:	bc08      	pop	{r3}
 80013c0:	469e      	mov	lr, r3
 80013c2:	4770      	bx	lr

080013c4 <_fini>:
 80013c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013ca:	bc08      	pop	{r3}
 80013cc:	469e      	mov	lr, r3
 80013ce:	4770      	bx	lr
